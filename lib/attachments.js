// Generated by CoffeeScript 1.3.3
(function() {
  var async, attachments, extensions, imagemagick, mkdirp;

  imagemagick = require('imagemagick');

  mkdirp = require('mkdirp');

  async = require('async');

  extensions = {
    "image/jpeg": ".jpg",
    "image/png": ".png",
    "image/gif": ".gif"
  };

  module.exports = attachments = function(config) {
    var Processor;
    return {
      Processor: Processor = (function() {

        function Processor(file, options) {
          this.file = file;
          this.options = options != null ? options : {};
          this.styles = this.options.styles || {};
          this.id = this.options.id || new Date().getTime();
          this.name = this.options.name || this.file.name.replace(/(\..*?)$/, '');
          this.extension = extensions[this.file.type];
        }

        Processor.prototype.conversions = function() {
          var conversion, conversions, style;
          return conversions = (function() {
            var _ref, _results,
              _this = this;
            _ref = this.styles;
            _results = [];
            for (style in _ref) {
              conversion = _ref[style];
              _results.push((function(style, conversion) {
                var args, destFile, dir, groups;
                dir = _this.dir(style);
                destFile = _this.path(style);
                args = [_this.file.path, '-resize', conversion];
                if (groups = conversion.match(/^(.*)\^$/)) {
                  args = args.concat(['-gravity', 'center', '-extent', groups[1]]);
                }
                args.push(destFile);
                return {
                  style: style,
                  path: destFile,
                  args: args,
                  convert: function(cb) {
                    return mkdirp(dir, function(err) {
                      if (err != null) {
                        return cb(err);
                      }
                      return imagemagick.convert(args, cb);
                    });
                  }
                };
              })(style, conversion));
            }
            return _results;
          }).call(this);
        };

        Processor.prototype.convert = function(cb) {
          var c, conversions;
          conversions = this.conversions();
          return async.parallel((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = conversions.length; _i < _len; _i++) {
              c = conversions[_i];
              _results.push(c.convert);
            }
            return _results;
          })(), cb);
        };

        Processor.prototype.dir = function(style) {
          return "" + config.storage.dir.path + "/" + config.prefix + "/" + this.id + "/" + style;
        };

        Processor.prototype.path = function(style) {
          return "" + (this.dir(style)) + "/" + this.name + this.extension;
        };

        return Processor;

      })()
    };
  };

}).call(this);
