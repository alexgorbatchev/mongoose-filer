// Generated by CoffeeScript 1.3.3
(function() {
  var EventEmitter, assert, async, attachments, extensions, imagemagick, path, tmpFile,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  imagemagick = require('imagemagick');

  async = require('async');

  EventEmitter = require('events').EventEmitter;

  assert = require('assert');

  path = require('path');

  extensions = {
    "image/jpeg": ".jpg",
    "image/png": ".png",
    "image/gif": ".gif"
  };

  tmpFile = function(tmpDir) {
    var i, name, _i;
    name = "";
    for (i = _i = 0; _i < 32; i = ++_i) {
      name += Math.floor(Math.random() * 16).toString(16);
    }
    return path.join(tmpDir, name);
  };

  module.exports = attachments = function(config) {
    var Attachment, Processor, storage, tmpDir;
    tmpDir = config.tmpDir || process.env.TMPDIR;
    assert.ok(path.existsSync(tmpDir), "" + tmpDir + " does not exist");
    storage = require('./storage')(config.storage);
    return {
      Attachment: Attachment = (function() {

        function Attachment(id, options) {
          var _ref;
          this.id = id;
          this.options = options != null ? options : {};
          if ((_ref = this.id) == null) {
            this.id = new Date().getTime();
          }
          this.prefix = this.options.prefix || "default";
          this.store = new storage.Store(this);
          if (this.options.file != null) {
            this.file(this.options.file);
          }
        }

        Attachment.prototype.file = function(file) {
          this.file = file;
          this.extension = extensions[this.file.type];
          return this.name = this.options.name || this.file.name.replace(/(\..*?)$/, '');
        };

        Attachment.prototype.save = function(cb) {
          var processor,
            _this = this;
          processor = new Processor(this.file, {
            styles: this.options.styles
          });
          processor.on('convert', function(result) {
            return _this.store.pendingWrites.push(result);
          });
          processor.on('done', function() {
            return _this.store.flushWrites(cb);
          });
          processor.on('error', cb);
          return processor.convert();
        };

        Attachment.prototype.path = function(style) {
          return this.store.path(style);
        };

        return Attachment;

      })(),
      Processor: Processor = (function(_super) {

        __extends(Processor, _super);

        function Processor(file, options) {
          this.file = file;
          this.options = options != null ? options : {};
        }

        Processor.prototype.conversions = function() {
          var conversion, conversions, destFileBase, style;
          destFileBase = tmpFile(tmpDir);
          return conversions = (function() {
            var _ref, _results,
              _this = this;
            _ref = this.options.styles;
            _results = [];
            for (style in _ref) {
              conversion = _ref[style];
              _results.push((function(style, conversion) {
                var args, destFile, groups, processor;
                destFile = "" + destFileBase + "-" + style;
                args = [_this.file.path, '-resize', conversion];
                if (groups = conversion.match(/^(.*)\^$/)) {
                  args = args.concat(['-gravity', 'center', '-extent', groups[1]]);
                }
                args.push(destFile);
                processor = _this;
                return {
                  style: style,
                  path: destFile,
                  args: args,
                  convert: function(cb) {
                    return imagemagick.convert(args, function(err) {
                      if (err != null) {
                        return cb("Imagemagick " + err);
                      }
                      processor.emit('convert', {
                        style: style,
                        file: destFile
                      });
                      return cb(null);
                    });
                  }
                };
              })(style, conversion));
            }
            return _results;
          }).call(this);
        };

        Processor.prototype.convert = function(cb) {
          var c, conversions,
            _this = this;
          conversions = this.conversions();
          return async.parallel((function() {
            var _i, _len, _results;
            _results = [];
            for (_i = 0, _len = conversions.length; _i < _len; _i++) {
              c = conversions[_i];
              _results.push(c.convert);
            }
            return _results;
          })(), function(err) {
            if (err != null) {
              _this.emit('error', err);
            }
            _this.emit('done');
            if (cb != null) {
              return cb(err);
            }
          });
        };

        return Processor;

      })(EventEmitter)
    };
  };

}).call(this);
