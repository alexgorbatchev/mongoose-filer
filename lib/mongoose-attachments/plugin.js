// Generated by CoffeeScript 1.3.3
(function() {
  var Attachment, Attachments, async, exports, mongoose, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  async = require('async');

  mongoose = require('mongoose');

  _ = require('underscore');

  Attachment = require('./attachment');

  Attachments = new mongoose.Schema({
    name: {
      type: String,
      required: true
    },
    fileName: String,
    contentType: String,
    createdAt: {
      type: Date,
      "default": Date.now
    }
  }, {
    strict: true
  });

  Attachments.virtual('file').get(function() {
    return this._file;
  }).set(function(value) {
    return this._file = value;
  });

  Attachments.path('contentType').validate(function(v) {
    var contentTypes, _ref;
    contentTypes = (_ref = this.parent) != null ? _ref.schema.attachments[this.name].contentType : void 0;
    return !(contentTypes != null) || (__indexOf.call(contentTypes, v) >= 0);
  }, "acceptable content type");

  Attachments.method({
    url: function(style) {
      this.attachment || (this.attachment = new Attachment(this.parent.id, {
        name: this.fileName,
        prefix: this.prefix(),
        styles: this.parent.schema.attachments[this.name].styles
      }));
      return this.attachment.url(style);
    },
    prefix: function() {
      return this.parent.schema.attachments[this.name].prefix || ("" + this.parent.constructor.modelName + "/" + this.name);
    }
  });

  exports = module.exports = function(schema, options) {
    var name;
    name = options.name;
    schema.attachments || (schema.attachments = {});
    schema.attachments[name] = options;
    if (!schema.path('attachments')) {
      schema.add({
        'attachments': [Attachments]
      });
      schema.pre('save', function(next) {
        var a, attachment, saves;
        saves = (function() {
          var _i, _len, _ref, _results;
          _ref = this.attachments;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            attachment = _ref[_i];
            if (!(attachment.isNew && (attachment.file != null))) {
              continue;
            }
            a = new Attachment(this.id, {
              prefix: attachment.prefix(),
              styles: options.styles,
              file: attachment.file
            });
            _results.push(function(cb) {
              return a.save(cb);
            });
          }
          return _results;
        }).call(this);
        return async.parallel(saves, next);
      });
    }
    schema.virtual(name).get(function() {
      return _(this.attachments).find(function(a) {
        return a.name === name;
      });
    });
    return schema.virtual(name).set(function(value) {
      var existing;
      (existing = this.get(name)) && existing.remove();
      if (value.path) {
        return this.attachments.push({
          name: name,
          fileName: value.name,
          contentType: value.type,
          file: value.path
        });
      }
    });
  };

  exports.MongooseAttachment = mongoose.model('Attachment', Attachments);

}).call(this);
