// Generated by CoffeeScript 1.3.3
(function() {
  var Attachments, exports, mongoose, _,
    __indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

  mongoose = require('mongoose');

  _ = require('underscore');

  Attachments = new mongoose.Schema({
    name: {
      type: String,
      required: true
    },
    fileName: String,
    contentType: String,
    createdAt: {
      type: Date,
      "default": Date.now
    }
  }, {
    strict: true
  });

  Attachments.virtual('file').get(function() {
    return this._file;
  }).set(function(value) {
    return this._file = value;
  });

  Attachments.path('contentType').validate(function(v) {
    var contentTypes, _ref;
    contentTypes = (_ref = this.parent) != null ? _ref.schema.attachments[this.name].contentType : void 0;
    return !(contentTypes != null) || (__indexOf.call(contentTypes, v) >= 0);
  }, "acceptable content type");

  exports = module.exports = function(schema, options) {
    var name;
    if (!schema.path('attachments')) {
      schema.attachments = {};
      schema.add({
        'attachments': [Attachments]
      });
      schema.pre('save', function(next) {
        return next();
      });
    }
    name = options.name;
    schema.attachments[name] = options;
    schema.virtual(name).get(function() {
      return _(this.attachments).find(function(a) {
        return a.name === name;
      });
    });
    return schema.virtual(name).set(function(value) {
      var existing;
      (existing = this.get(name)) && existing.remove();
      if (value.path) {
        return this.attachments.push({
          name: name,
          fileName: value.name,
          contentType: value.type,
          file: value.path
        });
      }
    });
  };

  exports.Attachment = mongoose.model('Attachment', Attachments);

}).call(this);
