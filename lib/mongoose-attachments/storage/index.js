// Generated by CoffeeScript 1.3.3
(function() {
  var Storage, assert, async, exports, path;

  async = require('async');

  assert = require('assert');

  path = require('path');

  exports = module.exports = Storage = (function() {

    function Storage(attachment) {
      this.attachment = attachment;
      this.pendingWrites = [];
    }

    Storage.prototype.path = function(style) {
      return path.join('/', this.attachment.prefix, this.attachment.id, style, "" + this.attachment.fileName);
    };

    Storage.prototype.url = function(style) {
      return path.join(Storage.baseUrl, this.path(style));
    };

    Storage.prototype.flushWrites = function(cb) {
      var file, store, style, writes;
      store = this;
      writes = (function() {
        var _i, _len, _ref, _ref1, _results,
          _this = this;
        _ref = store.pendingWrites;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          _ref1 = _ref[_i], style = _ref1.style, file = _ref1.file;
          _results.push((function(style, file) {
            return function(done) {
              return store.write(style, file, done);
            };
          })(style, file));
        }
        return _results;
      }).call(this);
      return async.parallel(writes, function(err) {
        if (err != null) {
          return cb(err);
        }
        store.pendingWrites = [];
        return cb();
      });
    };

    Storage.prototype.flushDeletes = function(cb) {
      return cb();
    };

    Storage.prototype.write = function(style, file, cb) {
      throw "Storage adapter not loaded";
    };

    Storage.prototype["delete"] = function(style, cb) {
      throw "Storage adapter not loaded";
    };

    Storage.prototype.copyToLocalFile = function(style, file, cb) {
      throw "Storage adapter not loaded";
    };

    return Storage;

  })();

  exports.baseUrl = "http://locahost:3000/images";

  exports.configure = function(config) {
    var adapter;
    if (config.baseUrl != null) {
      Storage.baseUrl = config.baseUrl;
    }
    adapter = Object.keys(config.storage)[0];
    assert.ok(adapter, "Storage details are not in config");
    return require("./" + adapter)(Storage, config.storage[adapter]);
  };

}).call(this);
