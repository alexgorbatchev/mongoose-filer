// Generated by CoffeeScript 1.3.3
(function() {
  var assert, async, storage;

  async = require('async');

  assert = require('assert');

  module.exports = storage = function(config) {
    var Store, adapter;
    adapter = Object.keys(config)[0];
    assert.ok(adapter, "Storage is not configured");
    Store = (function() {

      function Store(attachment) {
        this.attachment = attachment;
        this.pendingWrites = [];
      }

      Store.prototype.path = function(style) {
        return "/" + this.attachment.prefix + "/" + this.attachment.id + "/" + style + "/" + this.attachment.name + this.attachment.extension;
      };

      Store.prototype.flushWrites = function(cb) {
        var file, store, style, writes;
        store = this;
        writes = (function() {
          var _i, _len, _ref, _ref1, _results,
            _this = this;
          _ref = store.pendingWrites;
          _results = [];
          for (_i = 0, _len = _ref.length; _i < _len; _i++) {
            _ref1 = _ref[_i], style = _ref1.style, file = _ref1.file;
            _results.push((function(style, file) {
              return function(done) {
                return store.write(style, file, done);
              };
            })(style, file));
          }
          return _results;
        }).call(this);
        return async.parallel(writes, function(err) {
          if (err != null) {
            return cb(err);
          }
          store.pendingWrites = [];
          return cb();
        });
      };

      Store.prototype.flushDeletes = function(cb) {
        return cb();
      };

      Store.prototype.write = function(style, file, cb) {
        throw "Storage adapter not loaded";
      };

      Store.prototype["delete"] = function(style, cb) {
        throw "Storage adapter not loaded";
      };

      Store.prototype.copyToLocalFile = function(style, file, cb) {
        throw "Storage adapter not loaded";
      };

      return Store;

    })();
    require("./" + adapter)(Store, config[adapter]);
    return {
      Store: Store
    };
  };

}).call(this);
