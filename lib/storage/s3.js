// Generated by CoffeeScript 1.3.3
(function() {
  var async, knox, storage;

  async = require('async');

  knox = require('knox');

  module.exports = storage = function(config) {
    var Store, client;
    client = knox.createClient({
      key: config.access_key_id,
      secret: config.secret_access_key,
      bucket: config.bucket
    });
    return {
      Store: Store = (function() {

        function Store(attachment) {
          this.attachment = attachment;
          this.pendingWrites = [];
        }

        Store.prototype.dir = function(style) {
          return "/" + this.attachment.prefix + "/" + this.attachment.id + "/" + style;
        };

        Store.prototype.path = function(style) {
          return "" + (this.dir(style)) + "/" + this.attachment.name + this.attachment.extension;
        };

        Store.prototype.flushWrites = function(cb) {
          var file, store, style, writes;
          store = this;
          writes = (function() {
            var _i, _len, _ref, _ref1, _results,
              _this = this;
            _ref = store.pendingWrites;
            _results = [];
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
              _ref1 = _ref[_i], style = _ref1.style, file = _ref1.file;
              _results.push((function(style, file) {
                return function(done) {
                  console.log("Putting file to " + (store.path(style)));
                  return client.putFile(file, store.path(style), {
                    'Content-Type': store.attachment.file.type
                  }, done);
                };
              })(style, file));
            }
            return _results;
          }).call(this);
          return async.parallel(writes, function(err) {
            if (err != null) {
              return cb(err);
            }
            store.pendingWrites = [];
            return cb();
          });
        };

        Store.prototype["delete"] = function(style) {};

        Store.prototype.copyToLocalFile = function(style, path) {};

        return Store;

      })()
    };
  };

}).call(this);
